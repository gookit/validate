package validate

// define validator alias name mapping
var validatorAliases = map[string]string{
	// alias -> real name
	"in":    "enum",
	"range": "between",
	// type
	"int":     "isInt",
	"integer": "isInt",
	"uint":    "isUint",
	"bool":    "isBool",
	"float":   "isFloat",
	"map":     "isMap",
	"ints":    "isInts", // []int
	"str":     "isString",
	"string":  "isString",
	"strings": "isStrings", // []string
	"arr":     "isArray",
	"array":   "isArray",
	"slice":   "isSlice",
	// val
	"regex":  "regexp",
	"eq":     "isEqual",
	"equal":  "isEqual",
	"intEq":  "intEqual",
	"int_eq": "intEqual",
	"ne":     "notEqual",
	"notEq":  "notEqual",
	"not_eq": "notEqual",
	// int compare
	"lte":          "max",
	"gte":          "min",
	"lessThan":     "lt",
	"less_than":    "lt",
	"greaterThan":  "gt",
	"greater_than": "gt",
	// len
	"len":      "length",
	"lenEq":    "length",
	"len_eq":   "length",
	"lengthEq": "length",
	"minLen":   "minLength",
	"maxLen":   "maxLength",
	"minSize":  "minLength",
	"min_size": "minLength",
	"maxSize":  "maxLength",
	"max_size": "maxLength",
	// string rune length
	"strlen":     "stringLength",
	"strLen":     "stringLength",
	"str_len":    "stringLength",
	"strLength":  "stringLength",
	"runeLen":    "stringLength",
	"rune_len":   "stringLength",
	"runeLength": "stringLength",
	// string
	"ip":        "isIP",
	"ipv4":      "isIPv4",
	"ipv6":      "isIPv6",
	"email":     "isEmail",
	"intStr":    "isIntString",
	"int_str":   "isIntString",
	"strInt":    "isIntString",
	"str_int":   "isIntString",
	"intString": "isIntString",
	//
	"stringNum":      "isStringNumber",
	"string_num":     "isStringNumber",
	"strNumber":      "isStringNumber",
	"str_number":     "isStringNumber",
	"strNum":         "isStringNumber",
	"str_num":        "isStringNumber",
	"stringNumber":   "isStringNumber",
	"hexadecimal":    "isHexadecimal",
	"hasWhitespace":  "hasWhitespace",
	"has_whitespace": "hasWhitespace",
	"has_wp":         "hasWhitespace",
	"printableASCII": "isPrintableASCII",
	//
	"ascii":      "isASCII",
	"ASCII":      "isASCII",
	"alpha":      "isAlpha",
	"alphaNum":   "isAlphaNum",
	"alpha_num":  "isAlphaNum",
	"alphaDash":  "isAlphaDash",
	"alpha_dash": "isAlphaDash",
	"base64":     "isBase64",
	"cidr":       "isCIDR",
	"CIDR":       "isCIDR",
	"CIDRv4":     "isCIDRv4",
	"CIDRv6":     "isCIDRv6",
	"dnsName":    "isDNSName",
	"dns_name":   "isDNSName",
	"DNSName":    "isDNSName",
	"dataURI":    "isDataURI",
	"data_URI":   "isDataURI",
	"data_uri":   "isDataURI",
	"empty":      "isEmpty",
	"filePath":   "isFilePath",
	"filepath":   "isFilePath",
	"hexColor":   "isHexColor",
	"isbn10":     "isISBN10",
	"ISBN10":     "isISBN10",
	"isbn13":     "isISBN13",
	"ISBN13":     "isISBN13",
	"json":       "isJSON",
	"JSON":       "isJSON",
	"lat":        "isLatitude",
	"latitude":   "isLatitude",
	"lon":        "isLongitude",
	"longitude":  "isLongitude",
	"mac":        "isMAC",
	"multiByte":  "isMultiByte",
	"num":        "isNumber",
	"number":     "isNumber",
	"numeric":    "isNumeric",
	"rgbColor":   "isRGBColor",
	"RGBColor":   "isRGBColor",
	"url":        "isURL",
	"URL":        "isURL",
	"fullURL":    "isFullURL",
	"fullUrl":    "isFullURL",
	"uuid":       "isUUID",
	"uuid3":      "isUUID3",
	"uuid4":      "isUUID4",
	"uuid5":      "isUUID5",
	"UUID":       "isUUID",
	"UUID3":      "isUUID3",
	"UUID4":      "isUUID4",
	"UUID5":      "isUUID5",
	"unixPath":   "isUnixPath",
	"winPath":    "isWinPath",
	"cnMobile":   "isCnMobile",
	// date
	"date":    "isDate",
	"gtDate":  "afterDate",
	"ltDate":  "beforeDate",
	"gteDate": "afterOrEqualDate",
	"lteDate": "beforeOrEqualDate",
	// uploaded file
	"img":       "isImage",
	"file":      "isFile",
	"image":     "isImage",
	"mime":      "inMimeTypes",
	"mimes":     "inMimeTypes",
	"mimeType":  "inMimeTypes",
	"mimeTypes": "inMimeTypes",
	// requiredXXX
	"requiredIf":         "required_if",
	"requiredUnless":     "required_unless",
	"requiredWith":       "required_with",
	"requiredWithAll":    "required_with_all",
	"requiredWithout":    "required_without",
	"requiredWithoutAll": "required_without_all",
}

// ValidatorName get real validator name.
func ValidatorName(name string) string {
	if rName, ok := validatorAliases[name]; ok {
		return rName
	}

	return name
}
